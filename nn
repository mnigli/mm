import React, { useState, useEffect } from 'react';
import { RotateCw, Scale, Trophy, Frown, HelpCircle, X } from 'lucide-react';

const CoinWeighingGame = () => {
  const [coins, setCoins] = useState([]);
  const [selectedCoins, setSelectedCoins] = useState({ left: [], right: [] });
  const [weighings, setWeighings] = useState(0);
  const [result, setResult] = useState(null);
  const [gameOver, setGameOver] = useState(false);
  const [fakeCoinIndex, setFakeCoinIndex] = useState(null);
  const [showEndScreen, setShowEndScreen] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);

  const initializeGame = () => {
    const newCoins = Array(8).fill(1);
    const fakeIndex = Math.floor(Math.random() * 8);
    newCoins[fakeIndex] = 0.9;
    setCoins(newCoins);
    setFakeCoinIndex(fakeIndex);
    setSelectedCoins({ left: [], right: [] });
    setWeighings(0);
    setResult(null);
    setGameOver(false);
    setShowEndScreen(false);
  };

  useEffect(() => {
    initializeGame();
  }, []);

  const selectCoin = (index, side) => {
    if (gameOver) return;
    setSelectedCoins(prev => {
      const otherSide = side === 'left' ? 'right' : 'left';
      if (prev[side].includes(index)) {
        return { ...prev, [side]: prev[side].filter(i => i !== index) };
      } else if (prev[otherSide].includes(index)) {
        return {
          ...prev,
          [otherSide]: prev[otherSide].filter(i => i !== index),
          [side]: [...prev[side], index]
        };
      } else {
        return { ...prev, [side]: [...prev[side], index] };
      }
    });
  };

  const weighCoins = () => {
    if (gameOver) return;
    const leftWeight = selectedCoins.left.reduce((sum, i) => sum + coins[i], 0);
    const rightWeight = selectedCoins.right.reduce((sum, i) => sum + coins[i], 0);
    let newResult;
    if (leftWeight < rightWeight) newResult = 'left';
    else if (rightWeight < leftWeight) newResult = 'right';
    else newResult = 'equal';
    setResult(newResult);
    setWeighings(prev => prev + 1);
    setSelectedCoins({ left: [], right: [] });
  };

  const guessCode = (index) => {
    setGameOver(true);
    if (index === fakeCoinIndex) {
      setResult('win');
    } else {
      setResult('lose');
    }
    setShowEndScreen(true);
  };

  const CoinButton = ({ index, side, onClick, isSelected, isGuess = false }) => (
    <button
      onClick={() => onClick(index, side)}
      className={`
        w-12 h-12 sm:w-16 sm:h-16 rounded-full 
        flex items-center justify-center 
        border-4 
        ${isGuess ? 'border-red-600' : side === 'right' ? 'border-sky-600' : 'border-yellow-600'}
        ${isSelected ? (side === 'right' ? 'bg-sky-400' : 'bg-yellow-400') : 
          isGuess ? 'bg-red-500' : 
          side === 'right' ? 'bg-sky-500' : 'bg-yellow-500'}
        ${isGuess ? 'hover:bg-red-400 blink' : 
          side === 'right' ? 'hover:bg-sky-300' : 'hover:bg-yellow-300'}
        transition-all duration-300 transform hover:scale-110
        shadow-lg hover:shadow-xl
        font-bold text-lg sm:text-xl
        ${isGuess || side === 'right' ? 'text-white' : 'text-gray-800'}
      `}
      disabled={gameOver && !isGuess}
    >
      {index + 1}
    </button>
  );

  const EndScreen = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 p-8 rounded-lg shadow-2xl text-center max-w-md">
        {result === 'win' ? (
          <>
            <Trophy className="w-24 h-24 mx-auto mb-4 text-yellow-400" />
            <h2 className="text-3xl font-bold mb-4 text-yellow-300 font-['Press_Start_2P']">כל הכבוד!</h2>
            <p className="text-xl mb-6 text-white font-['Press_Start_2P']">מצאת את המטבע המזויף!</p>
          </>
        ) : (
          <>
            <Frown className="w-24 h-24 mx-auto mb-4 text-blue-400" />
            <h2 className="text-3xl font-bold mb-4 text-blue-300 font-['Press_Start_2P']">לא נורא</h2>
            <p className="text-xl mb-6 text-white font-['Press_Start_2P']">אולי בפעם הבאה תצליח!</p>
          </>
        )}
        <p className="text-lg mb-6 text-green-400 font-['Press_Start_2P']">מספר שקילות: {weighings}</p>
        <button 
          onClick={initializeGame}
          className="px-6 py-3 bg-green-500 text-white rounded-full shadow-neon hover:bg-green-400 transition duration-300 font-['Press_Start_2P'] text-sm"
        >
          שחק שוב
        </button>
      </div>
    </div>
  );

  const Instructions = () => (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-gray-800 p-8 rounded-lg shadow-2xl max-w-2xl w-full mx-4 relative text-yellow-300">
        <button 
          onClick={() => setShowInstructions(false)}
          className="absolute top-2 right-2 text-yellow-300 hover:text-yellow-100"
        >
          <X size={24} />
        </button>
        <h2 className="text-2xl font-bold mb-6 text-yellow-400 font-['Press_Start_2P']">הוראות המשחק</h2>
        <div className="space-y-4">
          <p className="font-bold">ברוכים הבאים למשחק חידת המטבע המזויף!</p>
          <p>מטרת המשחק: למצוא את המטבע המזויף (הקל יותר) מבין 8 מטבעות.</p>
          <ol className="list-decimal list-inside space-y-2 pl-4">
            <li>בחר מטבעות לצד שמאל ולצד ימין של המאזניים.</li>
            <li>לחץ על כפתור "שקול" כדי להשוות את המשקל בין שני הצדדים.</li>
            <li>השתמש בתוצאות השקילה כדי לצמצם את האפשרויות.</li>
            <li>חזור על התהליך עד שתהיה בטוח מיהו המטבע המזויף.</li>
            <li>כשאתה מוכן לנחש, לחץ על המטבע שאתה חושב שהוא המזויף באזור "נחש את המטבע המזויף".</li>
          </ol>
          <p className="font-bold text-green-400">טיפ: נסה למצוא את המטבע המזויף במספר השקילות הקטן ביותר!</p>
        </div>
      </div>
    </div>
  );

  return (
    <div className="p-4 w-full max-w-4xl mx-auto bg-gray-800 text-yellow-300 font-mono relative">
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
        body { background-color: #1f2937; }
        @keyframes blink {
          0% { opacity: 1; }
          50% { opacity: 0.5; }
          100% { opacity: 1; }
        }
        .blink {
          animation: blink 1s infinite;
        }
      `}</style>
      <h1 className="text-xl sm:text-3xl font-bold mb-6 text-center font-['Press_Start_2P'] text-yellow-300">משחק חידת המטבע המזויף</h1>
      <div className="flex flex-col sm:flex-row justify-between mb-6 items-center">
        <button onClick={initializeGame} className="w-full sm:w-auto mb-4 sm:mb-0 px-6 py-3 bg-purple-600 text-white rounded-full shadow-neon hover:bg-purple-500 transition duration-300 font-['Press_Start_2P'] text-sm">משחק חדש</button>
        <button 
          onClick={() => setShowInstructions(true)} 
          className="w-full sm:w-auto mb-4 sm:mb-0 px-6 py-3 bg-blue-600 text-white rounded-full shadow-neon hover:bg-blue-500 transition duration-300 font-['Press_Start_2P'] text-sm flex items-center justify-center"
        >
          <HelpCircle size={20} className="mr-2" />
          הוראות
        </button>
        <div className="text-lg bg-gray-700 px-6 py-3 rounded-full shadow-neon text-yellow-300 font-bold font-['Press_Start_2P']">שקילות: {weighings}</div>
      </div>
      <div className="flex flex-col sm:flex-row justify-around mb-8 bg-gray-700 p-6 rounded-lg shadow-neon">
        <div className="w-full sm:w-1/3 mb-6 sm:mb-0">
          <h2 className="text-center mb-4 font-['Press_Start_2P'] text-sm text-yellow-300">צד שמאל</h2>
          <div className="grid grid-cols-4 gap-3">
            {coins.map((_, index) => (
              <CoinButton 
                key={`left-${index}`}
                index={index}
                side="left"
                onClick={selectCoin}
                isSelected={selectedCoins.left.includes(index)}
              />
            ))}
          </div>
        </div>
        <div className="w-full sm:w-1/3 flex flex-col items-center justify-center mb-6 sm:mb-0">
          <button 
            onClick={weighCoins} 
            disabled={gameOver || selectedCoins.left.length === 0 || selectedCoins.right.length === 0} 
            className="mb-4 p-2 bg-green-500 text-white rounded-full shadow-neon hover:bg-green-400 transition duration-300 flex flex-col items-center justify-center w-24 h-24 sm:w-32 sm:h-32 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Scale className="w-12 h-12 sm:w-16 sm:h-16" />
            <span className="font-['Press_Start_2P'] text-xs sm:text-sm mt-2">שקול</span>
          </button>
          {result && !gameOver && (
            <div className="text-center bg-gray-600 p-3 rounded-lg shadow-neon text-sm font-['Press_Start_2P']">
              {result === 'left' && <span>צד שמאל קל יותר</span>}
              {result === 'right' && <span>צד ימין קל יותר</span>}
              {result === 'equal' && <span>המשקל שווה</span>}
            </div>
          )}
        </div>
        <div className="w-full sm:w-1/3">
          <h2 className="text-center mb-4 font-['Press_Start_2P'] text-sm text-yellow-300">צד ימין</h2>
          <div className="grid grid-cols-4 gap-3">
            {coins.map((_, index) => (
              <CoinButton 
                key={`right-${index}`}
                index={index}
                side="right"
                onClick={selectCoin}
                isSelected={selectedCoins.right.includes(index)}
              />
            ))}
          </div>
        </div>
      </div>
      <div className="mt-8 bg-gray-700 p-6 rounded-lg shadow-neon">
        <h2 className="text-center mb-6 font-['Press_Start_2P'] text-lg text-yellow-300">נחש את המטבע המזויף</h2>
        <div className="grid grid-cols-4 sm:grid-cols-8 gap-3">
          {coins.map((_, index) => (
            <CoinButton 
              key={`guess-${index}`}
              index={index}
              onClick={guessCode}
              isSelected={gameOver && index === fakeCoinIndex}
              isGuess={true}
            />
          ))}
        </div>
      </div>
      {showEndScreen && <EndScreen />}
      {showInstructions && <Instructions />}
    </div>
  );
};

export default CoinWeighingGame;
